// scoping is not working inside the Multiselect.vue component
// as the nested properties are not inside it
// Therefore we need to use an external scoping
.multiselect[data-v-#{$scope_version}] {
	margin: 0;
	padding: 0 !important;
	display: inline-block;
	/* override this rule with your width styling if you need */
	min-width: 160px;
	position: relative;
	background-color: var(--color-main-background);

	/* Force single multiselect value to be shown when not active */
	&:not(.multiselect--active) .multiselect__single {
		width: 100%;
		z-index: 2 !important;
	}

	// active state, force the input to be shown, we don't want
	// the placeholder or the currently selected options
	&.multiselect--active {
		/* Opened: force display the input */
		input.multiselect__input {
			opacity: $opacity_full !important;
			cursor: text !important;
			// remove border radius on bottom opening
			border-radius: var(--border-radius) var(--border-radius) 0 0;
			display: block !important;
		}

		/* multiselect__limit hidden if active */
		.multiselect__limit {
			display: none;
		}
	}

	// Remove radius on top opening
	&.multiselect--active.multiselect--above {
		input.multiselect__input {
			border-radius: 0 0 var(--border-radius) var(--border-radius);
		}
	}

	// disabled state background
	&.multiselect--disabled,
	&.multiselect--disabled .multiselect__single {
		background-color: var(--color-background-dark) !important;
	}

	// loading state
	.loading-icon {
		position: absolute;
		right: 1px;
		top: 1px;
		width: 48px;
		height: 35px;
		background: var(--color-main-background);
		z-index: 3;
	}

	// multiple selected options display
	.multiselect__tags {
		/* space between tags and limit tag */
		$space-between: 5px;
		display: flex;
		flex-wrap: nowrap;
		overflow: hidden;
		border: 1px solid var(--color-border-dark);
		cursor: pointer;
		position: relative;
		border-radius: 3px;
		min-height: 34px;
		height: 100%;

		/* tag wrapper */
		.multiselect__tags-wrap {
			align-items: center;
			display: inline-flex;
			overflow: hidden;
			max-width: 100%;
			position: relative;
			padding: 3px $space-between;
			flex: 1 1;
			flex-wrap: nowrap;
			/* no tags or simple select? Show input directly
			input is used to display single value */
			&:empty ~ input.multiselect__input {
				opacity: $opacity_full !important;
				display: block !important;
				/* hide default empty text like .multiselect__placeholder,
				and show input instead. It looks better without a transition between
				a span and the input that have different styling */
				+ span:not(.multiselect__single) {
					display: none;
				}
			}
			/* selected tag */
			.multiselect__tag {
				line-height: 20px;
				padding: 3px 5px;
				background-image: none;
				color: var(--color-main-text);
				border: 1px solid var(--color-border-dark);
				display: inline-flex;
				align-items: center;
				border-radius: 3px;
				/* require to override the default width
				and force the tag to shring properly */
				min-width: 0;
				max-width: fit-content;
				max-width: -moz-fit-content;
				margin: 2px 1px;
				/* css hack, detect if more than two tags
				if so, flex-basis is set to half */
				&:only-child {
					flex: 0 1 auto;
				}
				&:not(:last-child) {
					margin-right: $space-between;
				}
				/* ellipsis the groups to be sure
				we display at least two of them */
				> span {
					white-space: nowrap;
					text-overflow: ellipsis;
					overflow: hidden;
				}
			}
		}

		/* Single select default value
		or default placeholder if search disabled*/
		.multiselect__single,
		.multiselect__placeholder {
			padding: 7px 6px; // like the input
			flex: 0 0 100%;
			z-index: 1; /* above input */
			background-color: var(--color-main-background);
			line-height: 18px; // 32px - 2*6px (padding) - 2*1px (border)
			color: var(--color-text-lighter); // like the input
			// Align content and make the flow smoother
			display: flex;
			align-items: center;

			// Anything inside will trigger the select opening
			&, * {
				cursor: pointer;
			}
		}
		/* displayed text if tag limit reached */
		.multiselect__strong,
		.multiselect__limit {
			line-height: 20px;
			color: var(--color-text-lighter);
			display: inline-flex;
			align-items: center;
			opacity: $opacity_normal;
			margin-right: $space-between;
			/* above the input */
			z-index: 5;
		}
		/* default multiselect input for search and placeholder */
		input.multiselect__input {
			width: 100% !important;
			position: relative !important;
			margin: 0;
			opacity: 0;
			/* let's leave it on top of tags but hide it */
			height: 100% !important;
			border: none;
			/* override hide to force show the placeholder */
			/* only when not active */
			cursor: pointer;
			/* override inline styling of the lib */
			padding: 7px 6px !important;
			display: none;
		}
	}

	/* results wrapper */
	.multiselect__content-wrapper {
		position: absolute;
		width: 100%;
		margin-top: -1px;
		border: 1px solid var(--color-border-dark);
		background: var(--color-main-background);
		z-index: 50;
		max-height: 250px;
		overflow-y: auto;
		border-radius: 0 0 var(--border-radius) var(--border-radius);
		.multiselect__content {
			width: 100%;
			padding: 0;
		}
		li {
			position: relative;
			display: flex;
			align-items: center;
			background-color: transparent;
			&,
			span {
				cursor: pointer;
			}
			> span {
				padding: 8px;
				white-space: nowrap;
				overflow: hidden;
				text-overflow: ellipsis;
				margin: 0;
				height: auto;
				min-height: 1em;
				-webkit-touch-callout: none;
				-webkit-user-select: none;
				-moz-user-select: none;
				-ms-user-select: none;
				user-select: none;
				display: inline-flex;
				align-items: center;
				background-color: transparent;
				color: var(--color-text-lighter);
				width: 100%;
				/* selected checkmark icon */
				&::before {
					content: ' ';
					background-repeat: no-repeat;
					background-position: center;
					min-width: 16px;
					min-height: 16px;
					display: block;
					opacity: $opacity_disabled;
					margin-right: 5px;
					visibility: hidden;
				}
				&.multiselect__option--disabled {
					background-color: var(--color-background-dark);
					opacity: $opacity_disabled;
				}
				&.multiselect__option--highlight {
					color: var(--color-main-text);
					background-color: var(--color-background-dark);
				}
				&:not(.multiselect__option--disabled):hover::before {
					opacity: .3;
				}
				&.multiselect__option--selected,
				&:not(.multiselect__option--disabled):hover {
					&::before {
						visibility: visible;
					}
				}
			}
		}
	}
	/* ABOVE display */
	&.multiselect--above .multiselect__content-wrapper {
		bottom: 100%;
		margin-bottom: -1px;
	}

	/* Icon before option select */
	&.multiselect--multiple {
		// push the input after the tag list
		.multiselect__tags {
			flex-wrap: wrap;
		}

		.multiselect__content-wrapper li > span {
			&::before {
				background-image: var(--icon-checkmark-000);
			}

			/* add the prop tag-placeholder="create" to add the +
			icon on top of an unknown-and-ready-to-be-created entry */
			&[data-select='create'] {
				&::before {
					background-image: var(--icon-add-000);
					visibility: visible;
				}
			}
		}
	}

	/* No need for an icon here */
	&.multiselect--single .multiselect__content-wrapper li > span::before {
		display: none;
	}

	/* Mouse feedback */
	&:hover,
	input.multiselect__input {
		.multiselect__placeholder {
			color: var(--color-main-text);
		}
	}
}
